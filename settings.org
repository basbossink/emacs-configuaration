** org-mode
#+begin_src emacs-lisp :tangle yes
  (use-package org
;;          :bind (("C-c l") . org-store-link)
          :config
          (setq org-confirm-babel-evaluate nil)
          (setq org-pretty-entities t)
          (setq org-export-with-sub-superscripts nil))
#+end_src
** Magit
#+begin_src emacs-lisp :tangle yes
(use-package magit
	:ensure t
	:bind (("C-x g" . magit-status)))
#+end_src
** ACE window
#+begin_src emacs-lisp :tangle yes
(use-package ace-window
	:ensure t
	:bind (("M-o a" . ace-window)))
#+end_src
** ACE jump mode
#+begin_src emacs-lisp :tangle yes
(use-package ace-jump-mode
	:ensure t
	:bind (("C-c C-SPC" . ace-jump-mode)))
#+end_src
** ripgrep searching
#+begin_src emacs-lisp :tangle yes
(use-package ripgrep
	:ensure t
	:bind (("C-S-f" . ripgrep-reqexp)))
#+end_src
** Jump to next and previous error like VS
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "<f8>") 'next-error)
(global-set-key (kbd "S-<f8>") 'previous-error)
#+end_src
** Refresh buffer unconditionally
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "<f5>") 'revert-buffer-without-confirm)
#+end_src
**** Keybinding
* Custom variables
** Keep emacs generated custumizations separate
#+begin_src emacs-lisp :tangle yes
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)
#+end_src
** Look and feel
*** Set theme to solarized light
#+begin_src emacs-lisp :tangle yes
(use-package color-theme-sanityinc-solarized
:ensure t
:config
(load-theme 'sanityinc-solarized-light t))
#+end_src
*** Highlight matching parentheses
#+begin_src emacs-lisp :tangle yes
(show-paren-mode)
#+end_src
*** Disable the toolbar
#+begin_src emacs-lisp :tangle yes
(tool-bar-mode -1)
#+end_src
*** Disable the startup screen
#+begin_src emacs-lisp :tangle yes
(setq inhibit-startup-screen t)
#+end_src
*** Themes
*** Show column number in mode line
#+begin_src emacs-lisp :tangle yes
(column-number-mode t)
#+end_src
*** Show the line number in the mode line
#+begin_src emacs-lisp :tangle yes
(line-number-mode 1)
#+end_src
*** Show the buffer size in the mode line
#+begin_src emacs-lisp :tangle yes
(size-indication-mode 1)
#+end_src
*** Show line numbers in the left margin
**** Enable linum mode globally
#+begin_src emacs-lisp :tangle yes
(global-linum-mode t)
#+end_src
**** Fix the font size of the line numbers
#+begin_src emacs-lisp :tangle yes
(eval-after-load "linum"
  '(set-face-attribute 'linum nil :family "Dejavu Sans Mono" :height 90 :slant 'normal :weight 'normal))
#+end_src
**** Set size of left fringe
#+begin_src emacs-lisp :tangle yes
(add-to-list 'default-frame-alist '(left-fringe . 10))
(add-to-list 'default-frame-alist '(right-fringe . 0))
#+end_src
**** Set linum format
#+begin_src emacs-lisp :tangle yes
  (setq-default linum-format 'dynamic)
#+end_src
*** Use a non-blinking cursor
#+begin_src emacs-lisp :tangle yes
(blink-cursor-mode 0)
#+end_src
*** Set language environment
#+begin_src emacs-lisp :tangle yes
(set-language-environment "UTF-8")
#+end_src
** Editing
*** Indentation
**** Use spaces instead of tabs
#+begin_src emacs-lisp :tangle yes
(setq-default indent-tabs-mode nil)
#+end_src
**** Set tab stops
#+begin_src emacs-lisp :tangle yes
(setq tab-stop-list (number-sequence 2 120 2))
#+end_src
**** Set tab width
#+begin_src emacs-lisp :tangle yes
(setq tab-width 2)
#+end_src
*** Disable use of mark when inactive
#+begin_src emacs-lisp :tangle yes
(setq mark-even-if-inactive nil)
#+end_src
*** Delete selected region when yanking text
#+begin_src emacs-lisp :tangle yes
(delete-selection-mode 1)
#+end_src
*** Sentences end with a single space
#+begin_src emacs-lisp :tangle yes
(setq sentence-end-double-space nil)
#+end_src
** Backup settings; store all backup and autosave files in the tmp directory
#+begin_src emacs-lisp :tangle yes
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
            `((".*" ,temporary-file-directory t)))
#+end_src
** Use emacs server
#+begin_src emacs-lisp :tangle yes
(server-mode)
#+end_src
** Environment changes
*** Modify paths to a number of executables
* Org mode configuration
** Set auto fill mode for org mode files
#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook 'auto-fill-mode)
#+end_src
** Babel
*** Set active Babel languages
#+begin_src emacs-lisp :tangle yes
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (plantuml . t)
;;   (R . t)
   (emacs-lisp . t)
   (sh . t)
   (dot . t)
   (ditaa . t)
   ))
#+end_src
*** Paths for interpreters
** Set org mode preference variables
#+begin_src emacs-lisp :tangle yes
#+end_src
** Make yasnippets and org-mode work together
#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook
          (lambda ()
            (org-set-local 'yas/trigger-key [tab])
            (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))
(defun yas/org-very-safe-expand ()
  (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
(add-hook 'org-mode-hook
          (lambda ()
            (make-variable-buffer-local 'yas/trigger-key)
            (setq yas/trigger-key [tab])
            (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
            (define-key yas/keymap [tab] 'yas/next-field)))

#+end_src
** Set up files to include in agenda
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-files (mapcar (lambda (f) (expand-file-name (concat "~/Dropbox/Personal/journals/" f))) '("2017.org" "divverence.org")))
#+end_src
* Magit
** Ensure ssh agent info propagates
#+begin_src emacs-lisp :tangle yes
(use-package exec-path-from-shell
	:ensure t
	:config
        (progn (exec-path-from-shell-copy-env "SSH_AGENT_PID")
        (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")))
#+end_src
** Initialize
*** Set Log margin format before magit loads
#+begin_src emacs-lisp :tangle yes
(setq magit-log-margin '(t "%Y-%m-%dT%H:%M:%S %z" 47 t 20))
#+end_src
*** Load magit
#+begin_src emacs-lisp :tangle yes
(require 'magit)
#+end_src
** Log parameters
#+begin_src emacs-lisp :tangle yes
(if (not (member "--graph" magit-log-arguments))
   (add-to-list "--graph" magit-log-arguments))
#+end_src
** Commit hook setup
#+begin_src emacs-lisp :tangle yes
(defun my-git-commit-setup-hook ()
  (progn (git-commit-turn-on-flyspell)
         (git-commit-turn-on-auto-fill)))
(add-hook 'git-commit-setup-hook 'my-git-commit-setup-hook)
#+end_src
** Set fill column for commit messages
Note that git-commit-fill-column and git-commit-summary-max-length
have to be set to *numberp* values
#+begin_src emacs-lisp :tangle yes
(setq git-commit-fill-column 78)
(setq-default git-commit-summary-max-length git-commit-fill-column)
#+end_src
* Other minor modes
** ACE window mode
#+begin_src emacs-lisp :tangle yes
(use-package ace-window
  :ensure t
  :bind* ("M-o M-a" . ace-window))
#+end_src
** ACE jump mode
#+begin_src emacs-lisp :tangle yes
#+end_src
** YASnippet
*** Enable globally
#+begin_src emacs-lisp :tangle yes
(use-package yasnippet
:ensure t
:config
(yas-global-mode 1))
#+end_src
** Abbreviations
*** Enable globally
#+begin_src emacs-lisp :tangle yes
(setq-default abbrev-mode t)
#+end_src
*** Read abbrevs file
#+begin_src emacs-lisp :tangle yes
(if (file-exists-p abbrev-file-name)
    (quietly-read-abbrev-file))
#+end_src
*** Save abbrevs file
#+begin_src emacs-lisp :tangle yes
(setq save-abbrevs t)
#+end_src
** Markdown mode
#+begin_src emacs-lisp :tangle yes
(use-package markdown-mode
  :ensure t
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src
* Custom functions
** Other functions
*** Revert buffer without confirmation
#+begin_src emacs-lisp :tangle yes
 (defun revert-buffer-without-confirm ()
   "Revert the current buffer without asking for a confirmation."
   (interactive)
   (revert-buffer t t t))
#+end_src
*** Delete trailing whitespace unless in markdown mode
#+begin_src emacs-lisp :tangle yes
  (defun delete-trailing-whitespace-unless-in-markdown-mode ()
      "Call delete trailing whitespace unless in markdown mode."
    (let ((curr-mode (buffer-local-value 'major-mode (current-buffer))))
                     (unless (or (eq 'gfm-mode curr-mode) (eq 'markdown-mode curr-mode))
                       (delete-trailing-whitespace))))
#+end_src
* Hooks
** Remove trailing whitespace when saving
#+begin_src emacs-lisp :tangle yes
 (add-hook 'before-save-hook 'delete-trailing-whitespace-unless-in-markdown-mode)
#+end_src
